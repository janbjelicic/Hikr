# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

	desc "Clears derived data, any locally-built archives, and resets simulators"
	lane :cleanup do
	    clear_derived_data
	    clean_build_artifacts
	    reset_simulator_contents
	end

	desc "Update changelog"
	lane :changelog do
		version = get_version_number(target: "Hikr")
		build_number = number_of_commits(all: false)
		versionNumber = version.to_s + " (" + build_number.to_s + ")"
		changelogTitle = "\n \n# Version " + versionNumber + "\n \n" + "## Changelog: \n \n"

		changelogExisting = File.read("changelog.md")

		changelog = changelog_from_git_commits(
		  pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
		  date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
		  match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
		  merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
		)

		finalChangeLog = changelogTitle+changelog+"\n\n"+changelogExisting

		File.write('changelog.md', finalChangeLog)

		print "Changelog generated. Please edit, save, and commit it."
	end

	desc "Generate Unit Test Code Coverage" 
	lane :test do 
    	scan(
		    workspace: "./Hikr.xcworkspace",
      		scheme: "HikrTests",
      		clean: true
    	)
    	xcov(
    		scheme: "Hikr",
    		only_project_targets: true
    	)
  	end

	desc "Push a new build to Testflight"
	lane :distribute do
	  	# increment_build_number
	  	
		cocoapods(podfile: "./Podfile")

		build_number = number_of_commits(all: false).to_s

		version = get_version_number(target: "Hikr").to_s


		# isDirty = false

		# Check if there are any uncommitted changes. Including the changelog - this should be committed
		# begin
		# 	ensure_git_status_clean

		# rescue
		# 	print "Tagging build as dirty. You have uncommitted changes. Check if you verified and committed the changelog.md"

		# 	if version.include? "dirty"
  #  				puts "version already is tagged dirty"
  #  			else 
		# 		version = version + "-dirty"
		# 	end

		# 	isDirty = true

		# end

		increment_build_number(
			xcodeproj: "./Hikr.xcodeproj",
  			build_number: build_number
		)

		increment_version_number(
			xcodeproj: "./Hikr.xcodeproj",
			version_number: version # Set a specific version number
		)


		update_app_identifier(
			app_identifier: 'com.allmighty.Hikr',
			plist_path: 'Hikr/Info.plist'
		)

		update_code_signing_settings(
	       use_automatic_signing: true,
	       path: "./Hikr.xcodeproj"
	    )

		gym(
			workspace: "Hikr.xcworkspace", 
			scheme: "Hikr",
			export_xcargs: "-allowProvisioningUpdates"
		)

		changelog = File.read("changelog.md")

		testflight(
			username: "jan.bjelicic@gmail.com",
  			app_identifier: "com.allmighty.Hikr",
  			skip_waiting_for_build_processing: true,
  			changelog: changelog
  		)

		# if isDirty == false 
			# print "Uploaded the clean build. Staging the new files, please commit them manually"
			# Do the tagging and everything

			# commit_version_bump(
			# 	xcodeproj: "./Hikr.xcodeproj",
			#   	message: "Version Bump",# create a commit with a custom message
			# )

			# add_git_tag(
			#   grouping: "hikr",
			#   prefix: "v"+version+".",
			# )

		# else 
		# 	print "Uploaded the dirty build."
		# end

		print "Uploaded to testflight"

		#print "Going to upload dsyms now to crashlytics"

		#upload_symbols_to_crashlytics(dsym_path: "./TraviPay.app.dSYM.zip", gsp_path: "./TraviPay/Firebase/GoogleService-Info-kstage.plist")
		
		#print "Uploading to crashlytics finished. Good bye!"

	end

	desc "Usage: fastlane set_dsyms version:1.2.3 build:1234"
	lane :set_dsyms do |options|
	    clean_build_artifacts

	    if (options[:version] && options[:build])
	      version = options[:version]
	      build = options[:build]
	    else
	      UI.user_error!("Missing required params to lane (i.e. fastlane set_dsyms version:X.Y.Z build:XXXX)\nExiting")
	    end

	    download_dsyms(
	      app_identifier: "com.allmighty.Hikr",
	      version: version,
	      build_number: build
	    )

	    upload_symbols_to_crashlytics(
	      binary_path: "./Pods/FirebaseCrashlytics/upload-symbols",
	    )

	    clean_build_artifacts
	end

end